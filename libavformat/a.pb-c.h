/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: a.proto */

#ifndef PROTOBUF_C_a_2eproto__INCLUDED
#define PROTOBUF_C_a_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Header Header;
typedef struct _Packet Packet;
typedef struct _Req Req;


/* --- enums --- */


/* --- messages --- */

struct  _Header
{
  ProtobufCMessage base;
  ProtobufCBinaryData extradata;
};
#define HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&header__descriptor) \
    , {0,NULL} }


struct  _Packet
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  protobuf_c_boolean key;
  protobuf_c_boolean decode_only;
};
#define PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet__descriptor) \
    , {0,NULL}, 0, 0 }


typedef enum {
  REQ__MESSAGE__NOT_SET = 0,
  REQ__MESSAGE_HEADER = 1,
  REQ__MESSAGE_PACKET = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQ__MESSAGE)
} Req__MessageCase;

struct  _Req
{
  ProtobufCMessage base;
  Req__MessageCase message_case;
  union {
    Header *header;
    Packet *packet;
  };
};
#define REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req__descriptor) \
    , REQ__MESSAGE__NOT_SET, {0} }


/* Header methods */
void   header__init
                     (Header         *message);
size_t header__get_packed_size
                     (const Header   *message);
size_t header__pack
                     (const Header   *message,
                      uint8_t             *out);
size_t header__pack_to_buffer
                     (const Header   *message,
                      ProtobufCBuffer     *buffer);
Header *
       header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   header__free_unpacked
                     (Header *message,
                      ProtobufCAllocator *allocator);
/* Packet methods */
void   packet__init
                     (Packet         *message);
size_t packet__get_packed_size
                     (const Packet   *message);
size_t packet__pack
                     (const Packet   *message,
                      uint8_t             *out);
size_t packet__pack_to_buffer
                     (const Packet   *message,
                      ProtobufCBuffer     *buffer);
Packet *
       packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   packet__free_unpacked
                     (Packet *message,
                      ProtobufCAllocator *allocator);
/* Req methods */
void   req__init
                     (Req         *message);
size_t req__get_packed_size
                     (const Req   *message);
size_t req__pack
                     (const Req   *message,
                      uint8_t             *out);
size_t req__pack_to_buffer
                     (const Req   *message,
                      ProtobufCBuffer     *buffer);
Req *
       req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req__free_unpacked
                     (Req *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Header_Closure)
                 (const Header *message,
                  void *closure_data);
typedef void (*Packet_Closure)
                 (const Packet *message,
                  void *closure_data);
typedef void (*Req_Closure)
                 (const Req *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor header__descriptor;
extern const ProtobufCMessageDescriptor packet__descriptor;
extern const ProtobufCMessageDescriptor req__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_a_2eproto__INCLUDED */
